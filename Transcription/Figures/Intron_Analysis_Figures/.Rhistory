p1lps.p2ints <- getOverlaps(root = root,exps = exps[2], dir.loop = dir.loop, loop.file = "merged_loops.bedpe",dir.int=dir.deg, interval="pol2.intron.dge.txt", cond = "Pol1 loops: Pol2 DE introns", diff.loop = F,anchors = T, degs = T)
p2lps.p2ints <- getOverlaps(root = root,exps = exps[3], dir.loop = dir.loop, loop.file = "merged_loops.bedpe",dir.int=dir.deg, interval="pol2.intron.dge.txt", cond = "Pol2 loops: Pol2 DE introns", diff.loop = F,anchors = T, degs = T)
## Get NULL populations
ints.wt.all <- getOverlaps(root = root,exps = exps[1], dir.loop = dir.loop, loop.file = "merged_loops.bedpe",dir.int=dir.deg, interval="intron.txt", cond = "WT loops: all introns",diff.loop = F,anchors = T, degs = F)
group.df <- rbind(wtlps.p1ints, p1lps.p1ints, wtlps.p2ints, p2lps.p2ints)
## Bin
group.obs <- Tile(group.df , 8)
null.obs <- Tile(null.df, 8)
gatherObs <- function(df, group){
require(pheatmap)
colors <- colorRampPalette(c("#798234","white","#D46780"))(64)
## get conditon labels
dput(unique(df$cond))
cond <- dput(unique(df$cond))
## reshape data
df.dist <- data.frame(bin = unique(group$binN))
cols <- c()
for (c in 1:length(cond)) {
## Bring in conditions
c <- cond[c]
x <- group[group$cond == c,]
cat(paste0(" adding condition : ", c, "\n"))
cols <- rbind(cols,c) ## Collect colnames
df.dist <- cbind(df.dist, obs = as.numeric(x$obs))
colnames(df.dist) <- c("bin",cols) ## Add colnames
}
## Prepapre for plotting
rownames <- unique(group$binN)
df.dist <- df.dist[,-c(1)]
## Get heatmap of distance data ## decile.heatmap.allcounts ## decile.heatmap.pol1.lfc.up ## decile.heatmap.pol1.lfc.dn ## decile.heatmap.actd.lfc.dn ## decile.heatmap.actd.lfc.up
p <- pheatmap(df.dist, display_numbers = F, number_color = "black", color = colors,
labels_row = rownames, cellwidth = 25, cellheight = 25,
fontsize_number = 8,  cluster_rows = FALSE,  cluster_cols = T,
main = "")
print(p)
}
## get intron sums over loops
gatherObs(null.df, null.obs)
## Group data
null.df <- rbind(ints.p2.all, ints.wt.all, ints.p1.all)
## Get NULL populations
ints.wt.all <- getOverlaps(root = root,exps = exps[1], dir.loop = dir.loop, loop.file = "merged_loops.bedpe",dir.int=dir.deg, interval="intron.txt", cond = "WT loops: all introns",diff.loop = F,anchors = T, degs = F)
## define repeat variables
list.files(file.path(root,dir.deg))
## Get NULL populations
ints.wt.all <- getOverlaps(root = root,exps = exps[1], dir.loop = dir.loop, loop.file = "merged_loops.bedpe",dir.int=dir.deg, interval="intron.txt", cond = "WT loops: all introns",diff.loop = F,anchors = T, degs = F)
ints.p1.all <- getOverlaps(root = root,exps = exps[2], dir.loop = dir.loop, loop.file = "merged_loops.bedpe",dir.int=dir.deg, interval="intron.txt", cond = "Pol1 loops: all introns", diff.loop = F,anchors = T, degs = F)
ints.p2.all <- getOverlaps(root = root,exps = exps[3], dir.loop = dir.loop, loop.file = "merged_loops.bedpe",dir.int=dir.deg, interval="intron.txt", cond = "Pol2 loops: all introns", diff.loop = F,anchors = T, degs = F)
## Group data
null.df <- rbind(ints.p2.all, ints.wt.all, ints.p1.all)
group.df <- rbind(wtlps.p1ints, p1lps.p1ints, wtlps.p2ints, p2lps.p2ints)
## Bin
group.obs <- Tile(group.df , 8)
null.obs <- Tile(null.df, 8)
gatherObs <- function(df, group){
require(pheatmap)
colors <- colorRampPalette(c("#798234","white","#D46780"))(64)
## get conditon labels
dput(unique(df$cond))
cond <- dput(unique(df$cond))
## reshape data
df.dist <- data.frame(bin = unique(group$binN))
cols <- c()
for (c in 1:length(cond)) {
## Bring in conditions
c <- cond[c]
x <- group[group$cond == c,]
cat(paste0(" adding condition : ", c, "\n"))
cols <- rbind(cols,c) ## Collect colnames
df.dist <- cbind(df.dist, obs = as.numeric(x$obs))
colnames(df.dist) <- c("bin",cols) ## Add colnames
}
## Prepapre for plotting
rownames <- unique(group$binN)
df.dist <- df.dist[,-c(1)]
## Get heatmap of distance data ## decile.heatmap.allcounts ## decile.heatmap.pol1.lfc.up ## decile.heatmap.pol1.lfc.dn ## decile.heatmap.actd.lfc.dn ## decile.heatmap.actd.lfc.up
p <- pheatmap(df.dist, display_numbers = F, number_color = "black", color = colors,
labels_row = rownames, cellwidth = 25, cellheight = 25,
fontsize_number = 8,  cluster_rows = FALSE,  cluster_cols = T,
main = "")
print(p)
}
## get intron sums over loops
gatherObs(null.df, null.obs)
gatherObs(group.df, group.obs)
## Group data
null.df <- rbind(ints.p2.all, ints.wt.all, ints.p1.all)
group.df <- rbind(wtlps.p1ints, p1lps.p1ints, wtlps.p2ints, p2lps.p2ints)
## Bin
group.sum <- sumDEints(group.df , 8)
null.sum <- sumDEints(null.df, 8)
gatherSums <- function(df, group){
require(pheatmap)
colors <- colorRampPalette(c("#798234","white","#D46780"))(64)
## get conditon labels
dput(unique(df$cond))
cond <- dput(unique(df$cond))
## reshape data
df.dist <- data.frame(bin = unique(group$binN))
cols <- c()
for (c in 1:length(cond)) {
## Bring in conditions
c <- cond[c]
x <- group[group$cond == c,]
cat(paste0(" adding condition : ", c, "\n"))
cols <- rbind(cols,c) ## Collect colnames
df.dist <- cbind(df.dist, sum = as.numeric(x$DEsum))
colnames(df.dist) <- c("bin",cols) ## Add colnames
}
## Prepapre for plotting
rownames <- unique(group$binN)
df.dist <- df.dist[,-c(1)]
## Get heatmap of distance data ## decile.heatmap.allcounts ## decile.heatmap.pol1.lfc.up ## decile.heatmap.pol1.lfc.dn ## decile.heatmap.actd.lfc.dn ## decile.heatmap.actd.lfc.up
p <- pheatmap(df.dist, display_numbers = F, number_color = "black", color = colors,
labels_row = rownames, cellwidth = 25, cellheight = 25,
fontsize_number = 8,  cluster_rows = FALSE,  cluster_cols = T,
main = "")
print(p)
}
## get intron sums over loops
gatherSums(null.df, null.sum)
gatherSums(group.df, group.sum)
library(data.table)
## super fast for loop to get all files and compile them into a single data frame
conds <- c("Pol1", "Pol2")
dir <- '/HiC/MultiHiCcompare/5000bpRes/'
df.f <- data.frame()
for (c in 1:length(conds)) {
cond <- conds[c]
cat(paste0("processing ", cond, "\n"))
myFiles <- list.files(file.path(root,dir),pattern=paste0(cond,"_"))
myList <- lapply(file.path(root,dir,myFiles), function(x) fread(x))
df <- do.call("rbind",myList)
df$cond <- rep(cond,nrow(df))
df.f <- rbind(df.f, df)
}
colnames(df.f) <- c("chr", "start", "stop", "D", "logFC", "logCPM", "p.value", "p.adj", "cond")
## define repeat variables
dir.deg <-"/RNAseq/results/Intron_counts"
dir.loop <- "/HiC/loop_analysis"
## Pol int coverage
p1de.p1ints <- getMultiOverlaps(multi.file = df.f, dir.int=dir.deg, interval="pol1.intron.dge.txt", conds = "Pol1",degs = T)
p2de.p1ints <- getMultiOverlaps(multi.file = df.f, dir.int=dir.deg, interval="pol1.intron.dge.txt", conds = "Pol2",degs = T)
## Pol2 int coverage
p1de.p2ints <- getMultiOverlaps(multi.file = df.f, dir.int=dir.deg, interval="pol2.intron.dge.txt", conds = "Pol1",degs = T)
p2de.p2ints <- getMultiOverlaps(multi.file = df.f, dir.int=dir.deg, interval="pol2.intron.dge.txt", conds = "Pol2",degs = T)
p1de.all.ints <- getMultiOverlaps(multi.file = df.f, dir.int=dir.deg, interval="intron.txt", conds = "Pol1",degs = F)
p2de.all.ints <- getMultiOverlaps(multi.file = df.f, dir.int=dir.deg, interval="intron.txt", conds = "Pol2",degs = F)
p1de <- rbind(p1de.p1ints, p1de.p2ints)
p2de <- rbind(p2de.p1ints, p2de.p2ints)
a <- data.frame(logFC = p1de$logFC.x, GeneID = p1de$GeneID, D= p1de$D, cond = rep("Pol1 DE introns", nrow(p1de)) )
b <- data.frame(logFC = p2de$logFC.x, GeneID = p2de$GeneID, D= p2de$D, cond = rep("Pol2 DE introns", nrow(p2de)) )
c <- data.frame(logFC = p1de.all.ints$logFC, GeneID = p1de.all.ints$GeneID, D= p1de.all.ints$D, cond = rep("Pol1 all introns", nrow(p1de.all.ints)) )
d <- data.frame(logFC = p2de.all.ints$logFC, GeneID = p2de.all.ints$GeneID, D= p2de.all.ints$D, cond = rep("Pol2 all introns", nrow(p2de.all.ints)) )
all.ints.lin <- rbind(a,b,c,d)
all.ints.lin <- tileDist(all.ints.lin , 20, summarize = T)
cols <- c("#E17C05","#CC503E","#94346E","#6F4070")
all.ints.lin %>%
mutate(binN = fct_reorder(binN, factor)) %>%
ggplot(aes(x= binN, y= sum, group=cond)) + theme_classic()+
geom_line(aes(color=cond)) + geom_point(aes(color=cond), size=4) + scale_color_manual(values=c(cols))+
theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),text = element_text(size=14, family="Arial"), axis.text.x = element_text(angle = 0),
panel.border = element_rect(linetype = "solid", colour = "black", fill = "NA", size = 0.5)) +
ggtitle(paste0("Intron Coverage | Differential Interaction Distance ")) + xlab("Mean Distance") + ylab("Intron Coverage") +
#scale_x_discrete(labels = c("0", "5kb", "10kb", "50kb", "180kb"), expand = c(0.025, 0.025)) ## Bin < 10
scale_x_discrete(labels = c("0", "5kb", "10kb", "20kb", "55kb","95kb","150kb", "330kb"), expand = c(0.025, 0.025)) # bin =20
## directories
dir.cts <- 'RNAseq/results/Intron_counts/'
dir.anno <- '/RNAseq/results/Intron_annotations/'
require(index)
require(magrittr)
require(stringr)
## get meta data
meta <- read.table(file.path(root,dir.anno, "metadata.txt"), sep= "\t", header= T)
sample.names <- meta$SampleNames # sample names (unique)
group <- meta$Group # groups for samples (non-unique)
## This function was taken from INDEX ##
## Helper function to get contrasts for each comparitor
get_pairwise_contrasts <- function(design, cols = ncol(design)) {
group_names <- colnames(design)
contrasts <- list()
contrast_names <- character()
for (i in 1:(cols - 1)) {
for (j in (i + 1):cols) {
contr <- numeric(length = cols)
contr[i] <- 1
contr[j] <- -1
contrast_name <- glue::glue("{group_names[i]} vs {group_names[j]}")
contrasts <- append(contrasts, list(contr))
contrast_names <- append(contrast_names, contrast_name)
}
}
setNames(contrasts, contrast_names)
}
## This function was taken from INDEX ##
## Function to get results using INDEX for all comparisons
getDGE <- function(vec, group){
## this function only works for single comparisons
## vec is the order of sample columns in the counts data. must match group list
## Load data
exon <- load(file.path(root,dir.cts,"Exon.RData"))
exon <- DGEList(counts$counts[,vec], genes=counts$annotation)
intron <- load(file.path(root,dir.cts,"Intron.RData"))
intron <- DGEList(counts$counts[,vec], genes=counts$annotation)
genebody <- load(file.path(root,dir.cts,"Genebody.RData"))
genebody <- DGEList(counts$count[,vec], genes=counts$annotation)
group <- group
## get intron lengths
intron$genes$Length <- genebody$genes$Length - exon$genes$Length + 1
## get experiment design
design <- model.matrix(~ 0 + group) %>%
set_colnames(colnames(.) %>% str_remove("group"))
print(paste0("design: "))
print(design)
## get pairwise contrast for design
pairwise_contrasts <- get_pairwise_contrasts(design)
print(paste0("pairwise contrasts: "))
print(pairwise_contrasts)
## use INDEX to get intron diff expression
res <-index_analysis(exon, intron, group = group, design = design, contrast = pairwise_contrasts[[1]], p.value = 0.05)
return(res)
}
## Get
actd.res <- getDGE(vec = c(12,13,14,1,2,3), group = c("CTRL_0hrs", "CTRL_0hrs", "CTRL_0hrs","ActD_6hrs", "ActD_6hrs", "ActD_6hrs"))
pol1.res <- getDGE(vec = c(12,13,14,4,5,6,7), group = c("CTRL_0hrs", "CTRL_0hrs", "CTRL_0hrs","Pol1_6hrs", "Pol1_6hrs", "Pol1_6hrs", "Pol1_6hrs"))
pol2.res <- getDGE(vec = c(12,13,14,8,9,10,11), group = c("CTRL_0hrs", "CTRL_0hrs", "CTRL_0hrs","Pol2_6hrs", "Pol2_6hrs", "Pol2_6hrs", "Pol2_6hrs"))
DE_Vol_Plot <- function(results, plt.title, lfc.up=0.58, lfc.dwn=-0.58,pvadj=0.05,
y.limits, x.limits=c(-10,10),dncol="#D46780", upcol="#798234") {
require(ggrepel)
require(ggplot2)
require(dplyr)
## Generate data frame
genes.rna <- data.frame(symbol = results$GeneID,lfc = results$logFC, padj=results$adj.P.Val, base=results$AveExpr)
resultsDN <- as.data.frame(genes.rna[which(genes.rna$lfc < lfc.dwn),])
resultsDN <- as.data.frame(resultsDN[which(resultsDN$padj < pvadj),])
length(rownames(resultsDN)) ## Gives count of down regulated
resultsUP <- as.data.frame(genes.rna[which(genes.rna$lfc > lfc.up),])
resultsUP <- as.data.frame(resultsUP[which(resultsUP$padj < pvadj),])
length(rownames(resultsUP)) ## Gives count of up regulated
## add a column of NAs
genes.rna$diffexpressed <- "NO"
## If log2Foldchange > 0.6 and pvalue < 0.05, set as "UP"
genes.rna$diffexpressed[genes.rna$lfc > lfc.up & genes.rna$padj < pvadj] <- "Upregulated"
## If log2Foldchange < -0.6 and pvalue < 0.05, set as "DOWN"
genes.rna$diffexpressed[genes.rna$lfc < lfc.dwn & genes.rna$padj < pvadj] <- "Downregulated"
## Create a new column "delabel" to de, that will contain the name of genes differentially expressed (NA in case they are not)
genes.rna$delabel <- NA
genes.rna$delabel[genes.rna$diffexpressed != "NO"] <- genes.rna$symbol[genes.rna$diffexpressed != "NO"]
## Jitter labeling
pos <- position_jitter(width = 0.2, seed = 1)
vplot <- genes.rna %>% mutate(mean.intensity = base/max(base)) %>%
ggplot(aes(x=lfc, y=-log10(padj), col=diffexpressed, size = mean.intensity #, label=delabel
)) +
geom_point(position = pos, alpha=0.7)+ theme_classic()+
scale_color_manual(name="Upregulated", values=c(dncol, "lightgrey", upcol))+
geom_vline(xintercept=c(lfc.dwn, lfc.up), col="red", lty = "dashed") +
geom_hline(yintercept=-log10(pvadj), col="red", lty = "dashed")+
#geom_text_repel(segment.color = 'transparent', position = pos, size = 3, xlim  = c(-6,6)) +
labs(title=plt.title, subtitle=paste(paste("Downregulated:",length(rownames(resultsDN))), paste("| Upregulated:",length(rownames(resultsUP))))) +
scale_y_continuous(name="-Log 10 Padj", limits=c(0,y.limits), breaks=seq(0,y.limits, by =50))+
scale_x_continuous(name="Log 2 Fold Change", limits=x.limits, breaks=c(-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7))+
theme( legend.position="none",plot.title = element_text(size=16), text = element_text(size=16, family="Arial"), axis.text.x = element_text(angle = 0))
return(vplot)
}
### Call function for results
DE_Vol_Plot(data.frame(pol1.res$tops$intron),"pol1 introns", y.limits=25) ## volplot.actd.labels
DE_Vol_Plot(data.frame(pol1.res$tops$exon)," pol1 exons", y.limits=25) ## volplot.actd.labels
DE_Vol_Plot(data.frame(pol2.res$tops$intron),"pol2 introns", y.limits=25) ## volplot.actd.labels
DE_Vol_Plot(data.frame(pol2.res$tops$exon)," pol2 exons", y.limits=25) ## volplot.actd.labels
DE_Vol_Plot(data.frame(actd.res$tops$intron),"actd introns", y.limits=25) ## volplot.actd.labels
DE_Vol_Plot(data.frame(actd.res$tops$exon),"actd exons", y.limits=25) ## volplot.actd.labels
## Barplot function
plot_index_barplot <- function(index_output, title) {
bar_col <-c("black", "black", "#B2B78B", "#8C9351", "#857E3E", "#A07654", "#BA6E6A", "#D46780")
# assign colours to points, every point should only belong to one category
categories <- index_output$category
categories <- factor(
categories,
levels = c("Mixed+-", "Mixed-+", "Intron-", "Intron+", "Exon-", "Exon+", "-", "+", "")
)
category_counts <- sapply(
setdiff(levels(categories), ""),
function(x) {
sum(categories == x)
}
)
category_counts <- category_counts[order(names(category_counts))]
plot.df <- data.frame(cats = names(category_counts), counts = category_counts)
ggplot(data=plot.df, aes(x=cats, y=counts, fill = cats)) + theme_classic()+ scale_y_continuous(limits = c(0,800), breaks = seq(0,800, 100)) +
theme( legend.position="",plot.title = element_text(size=16), text = element_text(size=16, family="Arial"), axis.text.x = element_text(angle = 90)) +
geom_bar(stat="identity", color = "black") + scale_fill_manual(values = bar_col) + ylab("DEGs") + xlab("") +ggtitle(title)
}
plot_index_barplot(actd.res, title = "ActD Index Categories") ## actd.index.bar
plot_index_barplot(pol1.res, title = "Pol1 Index Categories") ## pol1.index.bar
plot_index_barplot(pol2.res, title = "Pol2 Index Categories") ## pol2.index.bar
plot_index_logfc <- function(index_output, title) {
require(ggpubr)
require(ggplot2)
plot <- data.frame(intron = index_output$tops$intron$logFC, exon = index_output$tops$exon$logFC, cond = NA)
## Split data up into quarter
plot$cond[plot$intron > 0 & plot$exon < 0] <- "Q4"
plot$cond[plot$intron > 0 & plot$exon > 0] <- "Q3"
plot$cond[plot$intron < 0 & plot$exon > 0] <- "Q2"
plot$cond[plot$intron < 0 & plot$exon < 0] <- "Q1"
pos <- position_jitter(width = 0.2, seed = 1)
ggplot(plot, aes(x=intron, y=exon, color = cond)) +
scale_y_continuous(limits = c(-10,10))+scale_x_continuous(limits = c(-10,10))+
geom_point(position = pos, alpha=1)+ theme_pubr()+
scale_color_manual(values=c("#009392","#cf597e","#e88471","#39b185"), aesthetics = c("color", "fill"))+
geom_vline(xintercept=0, col="darkred", lty = "dashed") +
theme( legend.position="bottom",plot.title = element_text(size=16), text = element_text(size=16, family="Arial"), axis.text.x = element_text(angle = 0)) +
geom_hline(yintercept=0, col="darkred", lty = "dashed") +
xlab("Intronic LFC")+ ylab("Exonic LFC") + ggtitle(title)
}
plot_index_logfc(actd.res, title = "ActD LogFC") ## actd.index.lfc.scatter
plot_index_logfc(pol1.res, title = "Pol1 LogFC") ## pol1.index.lfc.scatter
plot_index_logfc(pol2.res, title = "Pol2 LogFC") ## pol2.index.lfc.scatter
plot_index_boxplot <- function(index_output) {
bar_col <- RColorBrewer::brewer.pal(9, "Paired")
bar_col <- bar_col[c(3:4, 7:8, 5:6, 1:2, 9)]
# assign colours to points, every point should only belong to one category
categories <- index_output$category
categories <- factor(
categories,
levels = c("Mixed+-", "Mixed-+", "Intron-", "Intron+", "Exon-", "Exon+", "-", "+", "")
)
category_counts <- sapply(
setdiff(levels(categories), ""),
function(x) {
sum(categories == x)
}
)
count_o <- order(category_counts)
category_counts <- category_counts[count_o]
bar_col <- bar_col[count_o]
merged_categories <- categories
levels(merged_categories) <- c("mixed", "mixed", "intron", "intron", "exon", "exon", "both", "both", "0")
boxplot_cols <- RColorBrewer::brewer.pal(9, "Paired")[c(3:4, 7:8, 5:6, 1:2, 9)]
boxplot_cols <- boxplot_cols[c(2,4,6,8,9)]
in_len_split <- split(sqrt(index_output$dges$intron$genes$Length), merged_categories)
in_len_mean <- sapply(in_len_split, median)
in_len_o <- order(in_len_mean)
in_len_split <- in_len_split[in_len_o]
boxplot_cols <- boxplot_cols[in_len_o]
boxplot(
in_len_split,
outline = FALSE,
border = boxplot_cols,
cex.axis = 1,
cex.lab = 1,
lwd = 2,
las = 2,
yaxt = "n",
main = "Total intron length (in thousands)"
)
ax <- ((0:7)*100)
ax[2] <- sqrt(20000)
axis(side = 2, at = ax, labels = (ax^2)/1e3, las = 2)
axis(side = 2, at = sqrt(median(index_output$dges$exon$genes$Length)), labels = "exon \n median", las = 2, font = 3, col.axis = "black", col.ticks = "black")
}
tbl <- readRDS('/projects/b1042/BackmanLab/Lucas/101823_rnaseq/Intron_GTFs/sumcvg.rds')
tbl <- readRDS('/Users/lucascarter/Documents/IBiS/Backman_Lab/projects/My_Projects/101823_RNAseq/Intron-reads/intron_coverage/sumcvg.rds')
View(tbl)
fig3a <- ggplot(tbl, aes(x = bin, y = lumpy, colour = Group, group = Group)) +
geom_line(size = 1) +
facet_grid(feature_type ~ cat, scales = "free_y") +
scale_x_continuous(limits = c(1,20)) +
scale_color_manual(values = c("blue", "green", "orange", "magenta")) +
theme_bw(base_size = 20) +
theme(aspect.ratio = 1,
legend.position = "bottom",
legend.title = element_blank(),
panel.grid = element_blank()
) +
labs(y = "Relative Log-coverage",
x = "Bin (Oriented 5' to 3')")
fig3a
#####################################################################################
# Intronic coverage plotting
#####################################################################################
library(dplyr)
library(tidyr)
library(pheatmap)
library(gridExtra)
library(ggplotify)
cvg <- readRDS('/Users/lucascarter/Documents/IBiS/Backman_Lab/projects/My_Projects/101823_RNAseq/Intron-reads/intron_coverage/sumcvg.rds')
pivot_data <- function(size, feature, name, conds) {
df <- data.frame()
for (i in 1:length(conds)){
cond <- conds[i]
group <- cvg %>% dplyr::filter(Group == cond)
tbl<- group %>% dplyr::filter(cat == size & feature_type == feature)  %>% select(-Group, -cat, -feature_type, -bumpy) %>% pivot_wider(names_from = bin, values_from = lumpy)
tbl <- data.frame(tbl)
rownames(tbl) <- cond
df <- rbind(df, tbl)
}
colnames(df) <- seq(1,20)
return(df)
}
shr.int <- pivot_data(size = "short", feature = "intron", conds = dput(unique(cvg$Group)))
med.int <- pivot_data(size = "regular", feature = "intron", conds = dput(unique(cvg$Group)))
lng.int <- pivot_data(size = "long", feature = "intron", conds = dput(unique(cvg$Group)))
shr.ex <- pivot_data(size = "short", feature = "exon", conds = dput(unique(cvg$Group)))
med.ex <- pivot_data(size = "regular", feature = "exon", conds = dput(unique(cvg$Group)))
lng.ex <- pivot_data(size = "long", feature = "exon", conds = dput(unique(cvg$Group)))
colors <- colorRampPalette(c("#798234","white","#D46780"))(64)
mats <- list(shr.int, med.int, lng.int, shr.ex, med.ex, lng.ex)
p <- list()
for(i in 1:length(mats)){
mat <- mats[[i]]
print(mat)
p[[i]] <- as.ggplot(pheatmap(mat , display_numbers = F, number_color = "black", color = colors,
cellwidth = 8, cellheight = 8,labels_row = c("ActD 6hrs", "CTRL DMSO", "Pol1 8hrs", "Pol2 8hrs"),
fontsize = 8,  cluster_rows = F,  cluster_cols = F))
}
grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],p[[6]],
nrow=2, ncol = 3,  top = "Intronic/Exonic Coverage",vp=viewport(width=1, height=0.5, clip = TRUE)
)
library(cowplot)
plot_grid(p[[1]],p[[2]],p[[3]],p[[4]],p[[5]],p[[6]])
## Plot panel of all variables
cvg <- na.omit(cvg)
colors <- c("#D8DBC5", "#A5AB77", "#97794D", "#BA6E6A")
colors <- c("#009392","#cf597e","#e88471","#39b185")
colors <- c("#D8DBC5", "#A5AB77", "#97794D", "#BA6E6A")
ggplot(cvg, aes(x = bin, y = lumpy, colour = Group, group = Group)) +
geom_line(size = 1) +
facet_grid(feature_type ~ cat, scales = "free_y") + ## panel of conditions
scale_x_continuous(limits = c(1,20)) +
scale_color_manual(values = colors) +
theme_classic(base_size = 20) +
theme(aspect.ratio = 1,
legend.position = "bottom",
legend.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size=16),
text = element_text(size=16, family="Arial")
) +
labs(y = "Normalized Log-Coverage",
x = "Binned Gene Body (5' -> 3')")
## Plot panel of aggregate values
cvg2 <- cvg %>% select(-cat) %>% group_by(feature_type,bin, Group) %>% summarise( sum = mean(lumpy))
ggplot(cvg2, aes(x = bin, y = sum, colour = Group, group = Group)) +
geom_line(size = 1) +
facet_grid(rows = vars(feature_type),scales = "free_y") + ## panel of conditions
scale_x_continuous(limits = c(1,20)) +
scale_color_manual(values = colors) +
theme_classic(base_size = 20) +
theme(aspect.ratio = 1,
legend.position = "bottom",
legend.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size=16),
text = element_text(size=16, family="Arial")
) +
labs(y = "Normalized Log-Coverage",
x = "Binned Gene Body (5' -> 3')")
cvg <- readRDS(file.path(root,'RNAseq/results/intron_coverage/sumcvg.rds'))
pivot_data <- function(size, feature, name, conds) {
df <- data.frame()
for (i in 1:length(conds)){
cond <- conds[i]
group <- cvg %>% dplyr::filter(Group == cond)
tbl<- group %>% dplyr::filter(cat == size & feature_type == feature)  %>% select(-Group, -cat, -feature_type, -bumpy) %>% pivot_wider(names_from = bin, values_from = lumpy)
tbl <- data.frame(tbl)
rownames(tbl) <- cond
df <- rbind(df, tbl)
}
colnames(df) <- seq(1,20)
return(df)
}
shr.int <- pivot_data(size = "short", feature = "intron", conds = dput(unique(cvg$Group)))
med.int <- pivot_data(size = "regular", feature = "intron", conds = dput(unique(cvg$Group)))
lng.int <- pivot_data(size = "long", feature = "intron", conds = dput(unique(cvg$Group)))
shr.ex <- pivot_data(size = "short", feature = "exon", conds = dput(unique(cvg$Group)))
med.ex <- pivot_data(size = "regular", feature = "exon", conds = dput(unique(cvg$Group)))
lng.ex <- pivot_data(size = "long", feature = "exon", conds = dput(unique(cvg$Group)))
## Plot panel of all variables
cvg <- na.omit(cvg)
colors <- c("#D8DBC5", "#A5AB77", "#97794D", "#BA6E6A")
ggplot(cvg, aes(x = bin, y = lumpy, colour = Group, group = Group)) +
geom_line(size = 1) +
facet_grid(feature_type ~ cat, scales = "free_y") + ## panel of conditions
scale_x_continuous(limits = c(1,20)) +
scale_color_manual(values = colors) +
theme_classic(base_size = 20) +
theme(aspect.ratio = 1,
legend.position = "bottom",
legend.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size=16),
text = element_text(size=16, family="Arial")
) +
labs(y = "Normalized Log-Coverage",
x = "Binned Gene Body (5' -> 3')")
## Plot panel of aggregate values
cvg2 <- cvg %>% select(-cat) %>% group_by(feature_type,bin, Group) %>% summarise( sum = mean(lumpy))
ggplot(cvg2, aes(x = bin, y = sum, colour = Group, group = Group)) +
geom_line(size = 1) +
facet_grid(rows = vars(feature_type),scales = "free_y") + ## panel of conditions
scale_x_continuous(limits = c(1,20)) +
scale_color_manual(values = colors) +
theme_classic(base_size = 20) +
theme(aspect.ratio = 1,
legend.position = "bottom",
legend.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size=16),
text = element_text(size=16, family="Arial")
) +
labs(y = "Normalized Log-Coverage",
x = "Binned Gene Body (5' -> 3')")
